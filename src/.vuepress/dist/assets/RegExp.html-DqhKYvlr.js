import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,e as a}from"./app-BonI-dzh.js";const n="/assets/expreg1-sJ1B4FN3.png",e="/assets/expreg2-DUpeXkuX.png",l={},d=a(`<h1 id="regular-expression" tabindex="-1"><a class="header-anchor" href="#regular-expression"><span>Regular Expression</span></a></h1><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><blockquote><p>​ 正则表达式(Regular Expression)是一种文本模式，包括普通字符(例如，a到z之间的字母)和特殊字符(称为“元字符”)，可以用来描述和匹配字符串的特定模式。</p><p>​ 正则表达式是一种用于模式匹配和搜索文本的工具。</p><p>​ 正则表达式提供了一种灵活且强大的方式来查找、替换、验证和提取文本数据。</p><p>​ 正则表达式可以应用于各种编程语言和文本处理工具中，如JavaScript、Python、Java、Perl等。</p></blockquote><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>以下实例从字符串str中找出数字：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;abc123def&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> patt1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[0-9]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">patt1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 123</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则表达式的模式" tabindex="-1"><a class="header-anchor" href="#正则表达式的模式"><span>正则表达式的模式</span></a></h3><p>正则表达式的模式可以包括以下内容：</p><ul><li>字面值字符：例如字母、数字、空格等，可以直接匹配它们自身。</li><li>特殊字符：例如点号**.<strong>、星号</strong>***、加号**+<strong>、问号</strong>?**等，它们具有特殊的含义和功能。</li><li>字符类：用方括号**[ ]**包围的字符集合，用于匹配方括号内的任意一个字符。</li><li>元字符：例如\\d、\\w、\\s等，用于匹配特定类型的字符，如数字、字母、空白等。</li><li>量词：例如{n}、{n,}、{n, m}等，用于指定匹配的次数或范围。</li><li>边界符号：例如**^**、$、\\b、\\B等，用于匹配字符串开头、结尾或单词边界位置。</li></ul><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><blockquote><p>​ 除非您以前使用过正则表达式，否则您可能不熟悉一些术语。但是。毫无疑问你已经使用过不涉及脚本的某些正则表达式概念。</p></blockquote><p>例如，您很可能使用<code>?</code>和<code>*</code>通配符来查找硬盘上的文件。<code>?</code> 通配符匹配文件名中的0个或1个字符，而<code>*</code>通配符匹配零个或多个字符。像<code>data(\\w)?\\.dat</code>这样的模式将查找下列文件：</p><p><strong>实例</strong></p><div class="language-tex line-numbers-mode" data-highlighter="shiki" data-ext="tex" data-title="tex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data1.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data2.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">datax.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dataN.dat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>*</code>字符代替<code>?</code>字符扩大了找到的文件的数量。<code>data.*\\.dat</code>匹配下列所有文件：</p><p><strong>实例</strong></p><div class="language-tex line-numbers-mode" data-highlighter="shiki" data-ext="tex" data-title="tex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data1.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data2.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data12.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">datax.dat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dataXYZ.dat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管这种搜索方法很有用，但它还是有限的。通过理解<code>*</code>通配符的工作原理，引入了正则表达式所依赖的概念，但正则表达式功能更强大，而且更加灵活。</p><p>正则表达式的使用，可以通过简单的办法来实现强大的功能。下面先给出一个简单的示例。</p><p><span style="font-size:30px;font-weight:900;padding:10px;">^[0-9]+abc$</span></p><ul><li><code>^</code>为匹配输入字符串的开始位置。</li><li><code>[0-9]+</code>匹配多个数字，<code>[0-9]</code>匹配单个数字，<code>+</code>匹配一个或者多个</li><li><code>abc$</code>匹配字母<code>abc</code>并以<code>abc</code>结尾，<code>$</code>为匹配输入字符串的结束位置。</li></ul><p>我们在写用户注册表单时，只允许用户名包含字符、数字、下划线和软连接字符<code>-</code>，并设置用户名的长度，我们就可以使用以下正则表达式来设定。</p><figure><img src="`+n+`" alt="experg1" tabindex="0" loading="lazy"><figcaption>experg1</figcaption></figure><p>以上的正则表达式可以匹配<code>thylove</code>、<code>thylove1</code>、<code>thy-love</code>、<code>thy_love</code>，但不匹配<code>th</code>，因为它包含的字母太短了，小于3个无法匹配。也不匹配thylove$，因为它包含特殊字符。</p><p><strong>实例</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 匹配以数字开头，并以abc结尾的字符串。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;123abc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> patt1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[0-9]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">abc</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">patt1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则表达式元字符和特性" tabindex="-1"><a class="header-anchor" href="#正则表达式元字符和特性"><span>正则表达式元字符和特性</span></a></h3><h4 id="字符匹配" tabindex="-1"><a class="header-anchor" href="#字符匹配"><span>字符匹配</span></a></h4><ul><li>普通字符：普通字符按照字面意义进行匹配，例如匹配字母&quot;a&quot;将匹配到文本中的&quot;a&quot;字符。</li><li>元字符：元字符具有特殊的含义，例如\\d匹配任意数字字符，\\w匹配任意字母数字字符，.匹配任意字符(除了换行符)等。</li></ul><h4 id="量词" tabindex="-1"><a class="header-anchor" href="#量词"><span>量词</span></a></h4><ul><li>*: 匹配前面的模式零次或多次。</li><li>+: 匹配前面的模式一次或多次</li><li>?: 匹配前面的模式零次或一次</li><li>{n}: 匹配前面的模式恰好n次</li><li>{n, }: 匹配前面的模式至少n次。</li><li>{n,m}: 匹配前面的模式至少n次且不超过m次。</li></ul><h4 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类"><span>字符类</span></a></h4><ul><li>[ ]: 匹配括号内的任意一个字符。例如，[abc]匹配字符&quot;a&quot;、&quot;b&quot;或&quot;c&quot;。</li><li>[^ ]: 匹配除了括号内的字符以外的任意一个字符。例如，[^abc] 匹配除了字符&quot;a&quot;、&quot;b&quot;或&quot;c&quot;以外的任意字符。</li></ul><h4 id="边界匹配" tabindex="-1"><a class="header-anchor" href="#边界匹配"><span>边界匹配</span></a></h4><ul><li>^: 匹配字符串的开头。</li><li>$: 匹配字符串的结尾。</li><li>\\b: 匹配单词边界。</li><li>\\B: 匹配非单词边界。</li></ul><h4 id="分组和捕获" tabindex="-1"><a class="header-anchor" href="#分组和捕获"><span>分组和捕获</span></a></h4><ul><li>( ): 用于分组和捕获子表达式</li><li>(?: ): 用于分组但不捕获子表达式。</li></ul><h4 id="特殊字符" tabindex="-1"><a class="header-anchor" href="#特殊字符"><span>特殊字符</span></a></h4><ul><li>: 转义字符，用于匹配特殊字符本身。</li><li>.: 匹配任意字符(除了换行符)。</li><li>|: 用于指定多个模式的选择。</li></ul><h3 id="为什么使用正则表达式" tabindex="-1"><a class="header-anchor" href="#为什么使用正则表达式"><span>为什么使用正则表达式？</span></a></h3><p>典型的搜索各替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索动态文本，即使不是不可能，开弓没有回头箭也会变得很困难。</p><p>通过使用正则表达式，可以：</p><ul><li>测试字符串内的模式。 <ul><li>例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</li></ul></li><li>替换文本。 <ul><li>可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</li></ul></li><li>基于模式匹配从字符串中提取子字符串。 <ul><li>可以查找文档内或输入域内特定的文本。</li></ul></li></ul><table><thead><tr><th>命令或环境</th><th>.</th><th>[]</th><th>^</th><th>$</th><th>\\(\\)</th><th>\\{\\}</th><th>?</th><th>+</th><th>|</th><th>()</th></tr></thead><tbody><tr><td>vi</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Visual C++</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>awk</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td>awk是支持语法的，只是要在命令行加入 --posix or --re-interval参数即可，可见man awk中的interval expression</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>sed</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td><td></td><td></td></tr><tr><td>delphi</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>python</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>java</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>javascript</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>php</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>perl</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>C#</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr></tbody></table><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><blockquote><p>​ 正则表达式是一种用于匹配和操作文本的强大工具，它是由一系列字符和特殊字符组成的模式，用于描述要匹配的文本模式。</p><p>正则表达式可以在文本中查找、替换、提取和验证特定的模式。</p></blockquote><p>例如：</p><ul><li><strong>thylov+y</strong>，可以匹配thylove、thylovve、thylovvvvvve等，<code>+</code>号代表前面的字符必须至少出现一次(1次或多次)</li><li><strong>thylovv*b</strong>，可以匹配thylove、thylovve、thylovvvvvve等，<code>*</code>号代表前面的字符可以不出现，也可以出现一次或者多次(0次、或1次、或多次)</li><li><strong>thylovv?e</strong>，可以匹配thylove或者thylovve，<code>?</code>问号代表前面的字符最多只可以出现一次(0次或1次)</li></ul><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p><p>正则表达式是由普通字符(例如字符a到z)以及特殊字符(称为&quot;元字符&quot;)组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p><h3 id="普通字符" tabindex="-1"><a class="header-anchor" href="#普通字符"><span>普通字符</span></a></h3><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>[ABC]</code></td><td>匹配[...]中的所有字符，例如[aeiou]匹配字符串&quot;google dengshiqiang thylove&quot;中所有的 a e i o字母。<br><span style="letter-spacing:2px;">g<span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;">o</span>gl<span style="background-color:#b0dfe7;margin-right:1px;">e</span><span style="color:#CCCACAFF;font-size:40px;vertical-align:-8px;">·</span>d<span style="background-color:#b0dfe7;margin-right:1px;">e</span>ngsh<span style="background-color:#b0dfe7;margin-right:1px;">i</span>q<span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">a</span>ng<span style="color:#CCCACAFF;font-size:40px;vertical-align:-8px;">·</span>thyl<span style="background-color:#b0dfe7;margin-right:1px;">o</span>v<span style="background-color:#b0dfe7;margin-right:1px;">e</span></span></td></tr><tr><td><code>[^ABC]</code></td><td>匹配除了[...]中字符的所有字符，例如[^aeiou]匹配字符串&quot;google dengshiqiang thylove&quot;中除了a e i o字母的所有字符。<br><span style="letter-spacing:2px;"><span style="background-color:#b0dfe7;">G</span>oo<span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span>e<span style="color:#CCCACAFF;font-size:40px;vertical-align:-8px;">·</span><span style="background-color:#b0dfe7;margin-right:1px;">d</span>e<span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">s</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span>i<span style="background-color:#b0dfe7;margin-right:1px;">q</span>ia<span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="color:#CCCACAFF;font-size:40px;vertical-align:-8px;">·</span><span style="background-color:#b0dfe7;margin-right:1px;">t</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">y</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span>o<span style="background-color:#b0dfe7;margin-right:1px;">v</span>e</span></td></tr><tr><td><code>[A-Z]</code></td><td>[A-z]表示一个区间，匹配所有大写字母，[a-z]表示所有小写字母。<br><span style="letter-spacing:2px;"><span style="background-color:#b0dfe7;">G</span>oogle<span style="color:#CCCACAFF;font-size:40px;vertical-align:-8px;">·</span><span style="background-color:#b0dfe7;margin-right:1px;">D</span>engshiqiang<span style="color:#CCCACAFF;font-size:40px;vertical-align:-8px;">·</span><span style="background-color:#b0dfe7;margin-right:1px;">T</span>hylove</span></td></tr><tr><td><code>.</code></td><td>匹配除换行符(\\n、\\r)之外的任何单个字符，相等于[^\\n\\r]<br><span style="letter-spacing:2px;"><span style="background-color:#b0dfe7;margin-right:1px;">G</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span><span style="color:#CCCACAFF;background-color:#b0dfe7;margin-right:1px;"></span><span style="background-color:#b0dfe7;margin-right:1px;">D</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span><span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">s</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">q</span><span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">a</span><span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="color:#CCCACAFF;background-color:#b0dfe7;margin-right:1px;"></span><span style="background-color:#b0dfe7;margin-right:1px;">t</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">y</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">v</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span></span></td></tr><tr><td><code>[\\s\\S]</code></td><td>匹配所有。\\s是匹配所有空白符，包括换行，\\S非空白符，不包括换行。<br><span style="letter-spacing:2px;"><span style="background-color:#b0dfe7;margin-right:1px;">G</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span><span style="color:#CCCACAFF;background-color:#b0dfe7;margin-right:1px;"></span><span style="background-color:#b0dfe7;margin-right:1px;">D</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span><span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">s</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">q</span><span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">a</span><span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="color:#CCCACAFF;background-color:#b0dfe7;margin-right:1px;"></span><span style="background-color:#b0dfe7;margin-right:1px;">t</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">y</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">v</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span></span><br><span style="letter-spacing:2px;"><span style="background-color:#b0dfe7;margin-right:1px;">D</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span><span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">s</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">q</span><span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">a</span><span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><br><span style="background-color:#b0dfe7;margin-right:1px;">t</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">y</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">v</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span></span></td></tr><tr><td><code>\\w</code></td><td>匹配字母、数字、下划线。等价于[A-Za-z0-9]<br><span style="letter-spacing:2px;"><span style="background-color:#b0dfe7;margin-right:1px;">G</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span><span style="color:#CCCACAFF;margin-right:1px;"></span><span style="background-color:#b0dfe7;margin-right:1px;">D</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span><span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="background-color:#b0dfe7;margin-right:1px;">s</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">q</span><span style="background-color:#b0dfe7;margin-right:1px;">i</span><span style="background-color:#b0dfe7;margin-right:1px;">a</span><span style="background-color:#b0dfe7;margin-right:1px;">n</span><span style="background-color:#b0dfe7;margin-right:1px;">g</span><span style="color:#CCCACAFF;margin-right:1px;"></span><span style="background-color:#b0dfe7;margin-right:1px;">t</span><span style="background-color:#b0dfe7;margin-right:1px;">h</span><span style="background-color:#b0dfe7;margin-right:1px;">y</span><span style="background-color:#b0dfe7;margin-right:1px;">l</span><span style="background-color:#b0dfe7;margin-right:1px;">o</span><span style="background-color:#b0dfe7;margin-right:1px;">v</span><span style="background-color:#b0dfe7;margin-right:1px;">e</span></span></td></tr></tbody></table><h3 id="非打印字符" tabindex="-1"><a class="header-anchor" href="#非打印字符"><span>非打印字符</span></a></h3><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\\cx</td><td>匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的&#39;c&#39;字符。</td></tr><tr><td>\\f</td><td>匹配一个换页符。等价于\\x0c和\\cL。</td></tr><tr><td>\\n</td><td>匹配一个换行符。等价于\\x0a和\\cJ。</td></tr><tr><td>\\r</td><td>匹配一个回车符。等价于\\x0d和\\cM。</td></tr><tr><td>\\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等待。等价于[\\f\\n\\r\\t\\v]。注意Unicode正则表达式会匹配全角空格符。</td></tr><tr><td>\\S</td><td>匹配任何非空白字符。等价于[^\\f\\n\\r\\t\\v]。</td></tr><tr><td>\\t</td><td>匹配一个制表符。等价于\\x09和\\cl。</td></tr><tr><td>\\v</td><td>匹配一个垂直制表符。等价于\\x0b和\\cK。</td></tr></tbody></table><h3 id="特殊字符-1" tabindex="-1"><a class="header-anchor" href="#特殊字符-1"><span>特殊字符</span></a></h3><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的<code>thylov*e</code>中的<code>*</code>，简单的说就是表示任何字符串的意思。如果要查找字符串中的<code>*</code>符号，则需要对<code>*</code>进行转义。即在其前加一个<code>\\</code>，<code>thylov\\*e</code>匹配字符串thylov*e。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符&quot;转义&quot;，即，将反斜杠字符<code>\\</code>放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>匹配输入字符串的结尾位置。如果设置了RegExp对象的Multiline属性，则$也匹配&#39;\\n&#39;或&#39;\\r&#39;。要匹配$字符本身，请使用\\$。</td></tr><tr><td>()</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用\\(和\\)。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。要匹配*字符，请使用\\*。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。要匹配+字符，请使用\\+。</td></tr><tr><td>.</td><td>匹配除了换行符\\n之外的任何单字符。要匹配.，请使用\\.。</td></tr><tr><td>[</td><td>标记一个中括号表达式的开始。要匹配[，请使用\\[。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配?字符，请使用\\?。</td></tr><tr><td>\\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如，&#39;n&#39;匹配字符&#39;n&#39;。&#39;\\n&#39;匹配换行符。序列&#39;\\\\&#39;匹配&#39;\\&#39;，而&#39;\\(&#39;则匹配&quot;(&quot;。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配^字符本身，请使用\\^。</td></tr><tr><td>{</td><td>标记限定符表达式的开始。要匹配{，请使用\\{。</td></tr><tr><td>|</td><td>指明两项之间的一个选择。要匹配|，请使用|。</td></tr></tbody></table><h3 id="限定符" tabindex="-1"><a class="header-anchor" href="#限定符"><span>限定符</span></a></h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有<code>*</code>或<code>+</code>或<code>?</code>或<code>{n}</code>或<code>{n, }</code>或<code>{n,m}</code>共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配&quot;z&quot;以及&quot;zoo&quot;。<code>*</code>等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配&quot;zo&quot;以及&quot;zoo&quot;，但不能匹配&quot;z&quot;。<code>+</code>等价于<code>{1,}</code>。</td></tr><tr><td>？</td><td>匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可以匹配&quot;do&quot;、&quot;does&quot;、&quot;doxy&quot;中的&quot;do&quot;和&quot;does&quot;。<code>?</code>等价于<code>{0,1}</code>。</td></tr><tr><td>{n}</td><td>n是一个非负数整数。匹配确定的n次。例如，<code>o{2}</code>不能匹配&quot;Bob&quot;中o，但是级匹配&quot;food&quot;中的两个o。</td></tr><tr><td>{n,}</td><td>n是一个非负整数。至少匹配n次。例如，<code>o{2,}</code>不能匹配&quot;Bob&quot;中的o，但能匹配&quot;fooood&quot;中所有o。<code>o{1,}</code>等价于<code>o+</code>。<code>o{0,}</code>则等价于<code>o*</code>。</td></tr><tr><td>{n,m}</td><td>m和n均为非负整数，其中n &lt;= m。最少匹配n次且最多匹配m次。例如，<code>o{1,3}</code>将匹配&quot;fooooood&quot;中的前三个o。<code>o{0,1}</code>等价于<code>o?</code>。请注意在逗号和两个整数之间不能有空格。</td></tr></tbody></table><p>以下正则表达式匹配一个正整数，**[1-9]**设置第一个数字不是0，<code>[0-9]*</code>表示任意多个数字：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[1-9][0-9]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">*</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>*和 + 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。</mark></p><p>例如，您可能搜索 HTML 文档，以查找在 h1 标签内的内容。HTML 代码如下：</p><p>&lt;h1&gt;thylove&lt;/h1&gt;</p><p>贪婪：下面的表达式匹配从开始小于符号 (&lt;) 到关闭 h1 标记的大于符号 (&gt;) 之间的所有内容。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">*</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&gt;/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>**非贪婪：**如果您只需要匹配开始和结束 h1 标签，下面的非贪婪表达式只匹配 &lt;h1&gt;。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">*?</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&gt;/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过在 <strong><code>*</code></strong>、<strong><code>+</code></strong> 或 <strong><code>?</code></strong> 限定符之后放置 <strong><code>?</code></strong>，该表达式从&quot;贪婪&quot;表达式转换为&quot;非贪婪&quot;表达式或者最小匹配。</p><h3 id="定位符" tabindex="-1"><a class="header-anchor" href="#定位符"><span>定位符</span></a></h3><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\\b</strong> 描述单词的前或后边界，<strong>\\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">^</td><td style="text-align:left;">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td style="text-align:left;">\\B</td><td style="text-align:left;">非单词边界匹配。</td></tr></tbody></table><p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p><p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p><p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</p><p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">Chapter </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[1-9][0-9]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">{0,1}</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它既出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">Chapter </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[1-9][0-9]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">{0,1}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\\b</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">Cha/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>\\b</strong> 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/ter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\\b</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\\B</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">apt/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 <strong>\\B</strong> 非单词边界运算符，不可以匹配单词的开头或结尾，如果是下面的表达式，就不匹配 Chapter 中的 Cha：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">BCha</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="选择" tabindex="-1"><a class="header-anchor" href="#选择"><span>选择</span></a></h3><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p><p><strong>()</strong> 表示捕获分组，<strong>()</strong> 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用。</p><p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?=</strong> 和 <strong>?!</strong>，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h3 id="以下列出-、-、-、-的使用区别" tabindex="-1"><a class="header-anchor" href="#以下列出-、-、-、-的使用区别"><span>以下列出 ?=、?&lt;=、?!、?&lt;! 的使用区别</span></a></h3><p><strong>exp1(?=exp2)</strong>：查找 exp2 前面的 exp1。</p><p>反向引用还可以将通用资源指示符 (URI) 分解为其组件。假定您想将下面的 URI 分解为协议（ftp、http 等等）、域地址和页/路径：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">https</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//www.thylove.cn:80/html/html-tutorial.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下面的正则表达式提供该功能：</p><p><strong>实例</strong></p><p>输出所有匹配的数据：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://www.thylove.cn:80/html/html-tutorial.html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> patt1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /(</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">\\w</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">):</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\/\\/</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">^</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/:]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">)(:</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">\\d</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">*</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">^</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"># ]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">*</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">)/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">patt1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;br&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三行代码 <strong>str.match(patt1)</strong> 返回一个数组，实例中的数组包含 5 个元素，索引 0 对应的是整个字符串，索引 1 对应第一个匹配符（括号内），以此类推。</p><p>第一个括号子表达式捕获 Web 地址的协议部分。该子表达式匹配在冒号和两个正斜杠前面的任何单词。</p><p>第二个括号子表达式捕获地址的域地址部分。子表达式匹配非 <strong>:</strong> 和 <strong>/</strong> 之后的一个或多个字符。</p><p>第三个括号子表达式捕获端口号（如果指定了的话）。该子表达式匹配冒号后面的零个或多个数字。只能重复一次该子表达式。</p><p>最后，第四个括号子表达式捕获 Web 地址指定的路径和 / 或页信息。该子表达式能匹配不包括 # 或空格字符的任何字符序列。</p><p>将正则表达式应用到上面的 URI，各子匹配项包含下面的内容：</p><ul><li>第一个括号子表达式包含 <strong>https</strong></li><li>第二个括号子表达式包含 <strong>www.thylove.cn</strong></li><li>第三个括号子表达式包含 <strong>:80</strong></li><li>第四个括号子表达式包含 <strong>/html/html-tutorial.html</strong></li></ul><h2 id="修饰符-标记" tabindex="-1"><a class="header-anchor" href="#修饰符-标记"><span>修饰符（标记）</span></a></h2><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p><p>标记不写在正则表达式里，标记位于表达式之外，格式如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pattern</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">flags</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下表列出了正则表达式常用的修饰符：</p><table><thead><tr><th style="text-align:left;">修饰符</th><th style="text-align:left;">含义</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">i</td><td style="text-align:left;">ignore - 不区分大小写</td><td style="text-align:left;">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">global - 全局匹配</td><td style="text-align:left;">查找所有的匹配项。</td></tr><tr><td style="text-align:left;">m</td><td style="text-align:left;">multi line - 多行匹配</td><td style="text-align:left;">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td style="text-align:left;">s</td><td style="text-align:left;">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\\n</strong></td><td style="text-align:left;">默认情况下的圆点 <strong>.</strong> 是匹配除换行符 <strong>\\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \\n。</td></tr></tbody></table><h3 id="g-修饰符" tabindex="-1"><a class="header-anchor" href="#g-修饰符"><span>g 修饰符</span></a></h3><p>g 修饰符可以查找字符串中所有的匹配项：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 在字符串中查找 &quot;thylove&quot;:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Google thylove taobao thylove&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/thylove/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);   </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 查找第一次匹配项</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/thylove/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 查找所有匹配项</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="i-修饰符" tabindex="-1"><a class="header-anchor" href="#i-修饰符"><span>i 修饰符</span></a></h3><p>i 修饰符为不区分大小写匹配，实例如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 在字符串中查找 &quot;thylove&quot;:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Google thylove taobao RUNoob&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/thylove/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);   </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 区分大小写</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/thylove/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">gi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 不区分大小写</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="m-修饰符" tabindex="-1"><a class="header-anchor" href="#m-修饰符"><span>m 修饰符</span></a></h3><p>m 修饰符可以使 <strong>^</strong> 和 <strong>$</strong> 匹配一段文本中每行的开始和结束位置。</p><p>g 只匹配第一行，添加 m 之后实现多行。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">在字符串中查找</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;runoob&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;thylovegoogle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">taobao</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">thyloveweibo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">thylove/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);   </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 匹配一个</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">thylove/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">gm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 多行匹配</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="s-修饰符" tabindex="-1"><a class="header-anchor" href="#s-修饰符"><span>s 修饰符</span></a></h3><p>默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\\n</strong> 之外的任何字符，加上 s 之后, <strong>.</strong> 中包含换行符 <strong>\\n</strong>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">在字符串中查找</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;google</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">thylove</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">taobao&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/google</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);   </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 没有使用 s，无法匹配\\n</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/thylove</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 使用 s，匹配\\n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符"><span>元字符</span></a></h2><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">\\</td><td style="text-align:left;">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，&#39;n&#39; 匹配字符 &quot;n&quot;。&#39;\\n&#39; 匹配一个换行符。序列 &#39;\\&#39; 匹配 &quot;&quot; 而 &quot;(&quot; 则匹配 &quot;(&quot;。</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之后的位置。</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之前的位置。</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">匹配前面的子表达式一次或多次。例如，&#39;zo+&#39; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 或 &quot;does&quot; 。? 等价于 {0,1}。</td></tr><tr><td style="text-align:left;">{n}</td><td style="text-align:left;">n 是一个非负整数。匹配确定的 n 次。例如，&#39;o{2}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但是能匹配 &quot;food&quot; 中的两个 o。</td></tr><tr><td style="text-align:left;">{n,}</td><td style="text-align:left;">n 是一个非负整数。至少匹配n 次。例如，&#39;o{2,}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但能匹配 &quot;foooood&quot; 中的所有 o。&#39;o{1,}&#39; 等价于 &#39;o+&#39;。&#39;o{0,}&#39; 则等价于 &#39;o*&#39;。</td></tr><tr><td style="text-align:left;">{n,m}</td><td style="text-align:left;">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&#39;o{0,1}&#39; 等价于 &#39;o?&#39;。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 &quot;oooo&quot;，&#39;o+?&#39; 将匹配单个 &quot;o&quot;，而 &#39;o+&#39; 将匹配所有 &#39;o&#39;。</td></tr><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配包括 &#39;\\n&#39; 在内的任何字符，请使用像&quot;<strong>(.|\\n)</strong>&quot;的模式。</td></tr><tr><td style="text-align:left;">(pattern)</td><td style="text-align:left;">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 &#39;(&#39; 或 &#39;)&#39;。</td></tr><tr><td style="text-align:left;">(?:pattern)</td><td style="text-align:left;">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 &quot;或&quot; 字符 (|) 来组合一个模式的各个部分是很有用。例如， &#39;industr(?:y|ies) 就是一个比 &#39;industry|industries&#39; 更简略的表达式。</td></tr><tr><td style="text-align:left;">(?=pattern)</td><td style="text-align:left;">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，&quot;Windows(?=95|98|NT|2000)&quot;能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;，但不能匹配&quot;Windows3.1&quot;中的&quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:left;">(?!pattern)</td><td style="text-align:left;">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如&quot;Windows(?!95|98|NT|2000)&quot;能匹配&quot;Windows3.1&quot;中的&quot;Windows&quot;，但不能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:left;">(?&lt;=pattern)</td><td style="text-align:left;">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，&quot;\`(?&lt;=95</td></tr><tr><td style="text-align:left;">(?&lt;!pattern)</td><td style="text-align:left;">反向否定预查，与正向否定预查类似，只是方向相反。例如&quot;\`(?&lt;!95</td></tr><tr><td style="text-align:left;">x|y</td><td style="text-align:left;">匹配 x 或 y。例如，&#39;z|food&#39; 能匹配 &quot;z&quot; 或 &quot;food&quot;。&#39;(z|f)ood&#39; 则匹配 &quot;zood&quot; 或 &quot;food&quot;。</td></tr><tr><td style="text-align:left;">[xyz]</td><td style="text-align:left;">字符集合。匹配所包含的任意一个字符。例如， &#39;[abc]&#39; 可以匹配 &quot;plain&quot; 中的 &#39;a&#39;。</td></tr><tr><td style="text-align:left;">[^xyz]</td><td style="text-align:left;">负值字符集合。匹配未包含的任意字符。例如， &#39;[^abc]&#39; 可以匹配 &quot;plain&quot; 中的&#39;p&#39;、&#39;l&#39;、&#39;i&#39;、&#39;n&#39;。</td></tr><tr><td style="text-align:left;">[a-z]</td><td style="text-align:left;">字符范围。匹配指定范围内的任意字符。例如，&#39;[a-z]&#39; 可以匹配 &#39;a&#39; 到 &#39;z&#39; 范围内的任意小写字母字符。</td></tr><tr><td style="text-align:left;">[^a-z]</td><td style="text-align:left;">负值字符范围。匹配任何不在指定范围内的任意字符。例如，&#39;[^a-z]&#39; 可以匹配任何不在 &#39;a&#39; 到 &#39;z&#39; 范围内的任意字符。</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">匹配一个单词边界，也就是指单词和空格间的位置。例如， &#39;er\\b&#39; 可以匹配&quot;never&quot; 中的 &#39;er&#39;，但不能匹配 &quot;verb&quot; 中的 &#39;er&#39;。</td></tr><tr><td style="text-align:left;">\\B</td><td style="text-align:left;">匹配非单词边界。&#39;er\\B&#39; 能匹配 &quot;verb&quot; 中的 &#39;er&#39;，但不能匹配 &quot;never&quot; 中的 &#39;er&#39;。</td></tr><tr><td style="text-align:left;">\\cx</td><td style="text-align:left;">匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &#39;c&#39; 字符。</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">匹配一个换页符。等价于 \\x0c 和 \\cL。</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">匹配一个换行符。等价于 \\x0a 和 \\cJ。</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">匹配一个回车符。等价于 \\x0d 和 \\cM。</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">匹配一个制表符。等价于 \\x09 和 \\cI。</td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">匹配字母、数字、下划线。等价于&#39;[A-Za-z0-9_]&#39;。</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">匹配非字母、数字、下划线。等价于 &#39;[^A-Za-z0-9_]&#39;。</td></tr><tr><td style="text-align:left;">\\xn</td><td style="text-align:left;">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，&#39;\\x41&#39; 匹配 &quot;A&quot;。&#39;\\x041&#39; 则等价于 &#39;\\x04&#39; &amp; &quot;1&quot;。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td style="text-align:left;">\\num</td><td style="text-align:left;">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，&#39;(.)\\1&#39; 匹配两个连续的相同字符。</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td style="text-align:left;">\\nm</td><td style="text-align:left;">标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。</td></tr><tr><td style="text-align:left;">\\nml</td><td style="text-align:left;">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td style="text-align:left;">\\un</td><td style="text-align:left;">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。</td></tr></tbody></table><p>接下来我们分析一个匹配邮箱的正则表达式，如下图：</p><p><strong>实例</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;abcd test@thylove.cn 1234&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> patt1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\\b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">\\w.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%+-]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">\\w.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[a-zA-Z]</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">{2,6}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\\b</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">patt1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="image-20230624180601053" tabindex="0" loading="lazy"><figcaption>image-20230624180601053</figcaption></figure>',140),r=[d];function h(p,k){return i(),t("div",null,r)}const c=s(l,[["render",h],["__file","RegExp.html.vue"]]),y=JSON.parse('{"path":"/zh/codenotes/front-end/regexp/RegExp.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"title":"正则表达式","icon":"regexp","category":["后端","java","python","前端","javascript"],"tag":["正则表达式"],"sticky":false,"star":false,"article":false,"timeline":false,"description":"Regular Expression 正则表达式 ​ 正则表达式(Regular Expression)是一种文本模式，包括普通字符(例如，a到z之间的字母)和特殊字符(称为“元字符”)，可以用来描述和匹配字符串的特定模式。 ​ 正则表达式是一种用于模式匹配和搜索文本的工具。 ​ 正则表达式提供了一种灵活且强大的方式来查找、替换、验证和提取文本数据。 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/codenotes/front-end/regexp/RegExp.html"}],["meta",{"property":"og:site_name","content":"代码笔记"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"Regular Expression 正则表达式 ​ 正则表达式(Regular Expression)是一种文本模式，包括普通字符(例如，a到z之间的字母)和特殊字符(称为“元字符”)，可以用来描述和匹配字符串的特定模式。 ​ 正则表达式是一种用于模式匹配和搜索文本的工具。 ​ 正则表达式提供了一种灵活且强大的方式来查找、替换、验证和提取文本数据。 ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T11:08:57.000Z"}],["meta",{"property":"article:author","content":"Mr.Bing"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:modified_time","content":"2024-08-23T11:08:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"正则表达式\\",\\"description\\":\\"Regular Expression 正则表达式 ​ 正则表达式(Regular Expression)是一种文本模式，包括普通字符(例如，a到z之间的字母)和特殊字符(称为“元字符”)，可以用来描述和匹配字符串的特定模式。 ​ 正则表达式是一种用于模式匹配和搜索文本的工具。 ​ 正则表达式提供了一种灵活且强大的方式来查找、替换、验证和提取文本数据。 ...\\"}"]]},"headers":[{"level":2,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":3,"title":"正则表达式的模式","slug":"正则表达式的模式","link":"#正则表达式的模式","children":[]}]},{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"正则表达式元字符和特性","slug":"正则表达式元字符和特性","link":"#正则表达式元字符和特性","children":[]},{"level":3,"title":"为什么使用正则表达式？","slug":"为什么使用正则表达式","link":"#为什么使用正则表达式","children":[]}]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"普通字符","slug":"普通字符","link":"#普通字符","children":[]},{"level":3,"title":"非打印字符","slug":"非打印字符","link":"#非打印字符","children":[]},{"level":3,"title":"特殊字符","slug":"特殊字符-1","link":"#特殊字符-1","children":[]},{"level":3,"title":"限定符","slug":"限定符","link":"#限定符","children":[]},{"level":3,"title":"定位符","slug":"定位符","link":"#定位符","children":[]},{"level":3,"title":"选择","slug":"选择","link":"#选择","children":[]},{"level":3,"title":"以下列出 ?=、?<=、?!、?<! 的使用区别","slug":"以下列出-、-、-、-的使用区别","link":"#以下列出-、-、-、-的使用区别","children":[]}]},{"level":2,"title":"修饰符（标记）","slug":"修饰符-标记","link":"#修饰符-标记","children":[{"level":3,"title":"g 修饰符","slug":"g-修饰符","link":"#g-修饰符","children":[]},{"level":3,"title":"i 修饰符","slug":"i-修饰符","link":"#i-修饰符","children":[]},{"level":3,"title":"m 修饰符","slug":"m-修饰符","link":"#m-修饰符","children":[]},{"level":3,"title":"s 修饰符","slug":"s-修饰符","link":"#s-修饰符","children":[]}]},{"level":2,"title":"元字符","slug":"元字符","link":"#元字符","children":[]}],"git":{"createdTime":1724411337000,"updatedTime":1724411337000,"contributors":[{"name":"dsq","email":"93787944@qq.com","commits":1}]},"readingTime":{"minutes":29.69,"words":8907},"filePathRelative":"zh/codenotes/front-end/regexp/RegExp.md","localizedDate":"2024年8月23日","autoDesc":true}');export{c as comp,y as data};
